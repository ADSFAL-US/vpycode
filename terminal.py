"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º –≤–Ω—É—Ç—Ä–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
"""

import os
import sys
import time
import queue
import threading
import subprocess
import tkinter as tk
from tkinter import scrolledtext
import customtkinter as ctk

from theme import KanagawaTheme

class Terminal:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º"""
    
    def __init__(self, parent, frame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        
        Args:
            parent: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            frame: —Ñ—Ä–µ–π–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —Ç–µ—Ä–º–∏–Ω–∞–ª
        """
        self.parent = parent
        self.frame = frame
        self.shell_process = None
        self.command_queue = queue.Queue()
        self.output_queue = queue.Queue()
        
        self._setup_ui()
        self.start_shell()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
        console_header = ctk.CTkFrame(self.frame, fg_color=KanagawaTheme.DARKER_BG, height=25)
        console_header.pack(fill="x")
        
        console_label = ctk.CTkLabel(console_header, text="–¢–ï–†–ú–ò–ù–ê–õ", 
                                  text_color=KanagawaTheme.FOREGROUND, font=("Arial", 10, "bold"))
        console_label.pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å—é
        clear_btn = ctk.CTkButton(console_header, text="üóëÔ∏è", width=25, height=20, 
                               fg_color="transparent", hover_color=KanagawaTheme.LIGHTER_BG,
                               text_color=KanagawaTheme.FOREGROUND, command=self.clear)
        clear_btn.pack(side="right", padx=5)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_container = ctk.CTkFrame(self.frame, fg_color=KanagawaTheme.CONSOLE_BG)
        console_container.pack(fill="both", expand=True)
        console_container.grid_rowconfigure(0, weight=1)
        console_container.grid_columnconfigure(0, weight=1)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∫–æ–Ω—Å–æ–ª–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–≤–æ–¥–∞
        self.output = scrolledtext.ScrolledText(
            console_container, 
            wrap="word", 
            bd=0,
            bg=KanagawaTheme.CONSOLE_BG, 
            fg=KanagawaTheme.CONSOLE_FG,
            insertbackground=KanagawaTheme.CURSOR,
            font=("Consolas", 10), 
            padx=5, 
            pady=5
        )
        self.output.pack(fill="both", expand=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—ã–≤–æ–¥–∞
        self.output.tag_configure("error", foreground=KanagawaTheme.CONSOLE_ERROR)
        self.output.tag_configure("success", foreground=KanagawaTheme.CONSOLE_SUCCESS)
        self.output.tag_configure("info", foreground=KanagawaTheme.CONSOLE_INFO)
        self.output.tag_configure("prompt", foreground=KanagawaTheme.FUNCTION)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ —Ñ–æ–∫—É—Å–∞
        self.output.bind("<Return>", self._handle_input)
        self.output.bind("<FocusIn>", self._on_focus_in)
    
    def _on_focus_in(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º"""
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
        self.output.see(tk.END)
        self.output.mark_set(tk.INSERT, tk.END)
    
    def start_shell(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é –æ–±–æ–ª–æ—á–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if os.name == 'nt':  # Windows
            cmd = 'cmd.exe'
        else:  # Linux/Mac
            cmd = '/bin/bash'
            
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–æ–ª–æ—á–∫–∏ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º stdin/stdout
            self.shell_process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                shell=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ–±–æ–ª–æ—á–∫–∏
            threading.Thread(target=self._read_shell_output, daemon=True).start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –æ–±–æ–ª–æ—á–∫–µ
            threading.Thread(target=self._send_shell_commands, daemon=True).start()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
            self.write("–¢–µ—Ä–º–∏–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.\n", "info")
            self.write("$ ", "prompt")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π –æ–±–æ–ª–æ—á–∫–∏: {e}")
    
    def _read_shell_output(self):
        """–ß–∏—Ç–∞–µ—Ç –≤—ã–≤–æ–¥ –∏–∑ –æ–±–æ–ª–æ—á–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if not self.shell_process:
            return
            
        while self.shell_process is not None and self.shell_process.poll() is None:
            try:
                line = self.shell_process.stdout.readline()
                if line:
                    self.output_queue.put(line)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    self.parent.after(10, self._update_console_from_queue)
            except Exception:
                if self.shell_process is not None:
                    continue
                else:
                    break
    
    def _send_shell_commands(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±–æ–ª–æ—á–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if not self.shell_process:
            return
            
        while self.shell_process is not None and self.shell_process.poll() is None:
            try:
                if not self.command_queue.empty():
                    cmd = self.command_queue.get()
                    self.shell_process.stdin.write(f"{cmd}\n")
                    self.shell_process.stdin.flush()
            except Exception:
                if self.shell_process is not None:
                    continue
                else:
                    break
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
            time.sleep(0.05)
    
    def _update_console_from_queue(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–æ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            while not self.output_queue.empty():
                line = self.output_queue.get_nowait()
                self.write(line)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞
            if not self.output_queue.empty():
                # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—â–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                self.parent.after(10, self._update_console_from_queue)
            else:
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
                # –°–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ readonly
                state = self.output.cget("state")
                self.output.configure(state="normal")
                self.output.insert(tk.END, "$ ", "prompt")
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
                self.output.see(tk.END)
                self.output.mark_set(tk.INSERT, tk.END)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.output.configure(state=state)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏: {e}")
    
    def _handle_input(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (—Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥)
            input_start = self.output.index("insert linestart")
            input_end = self.output.index("insert")
            input_text = self.output.get(input_start, input_end)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–æ–º–ø—Ç–∞ ($)
            if input_text.startswith("$ "):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç)
                command = input_text[2:].strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
                self.output.insert("insert", "\n")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–±–æ–ª–æ—á–∫—É
                self.command_queue.put(command)
                
                # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ Enter
                return "break"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
    
    def write(self, text, tag=None):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç–µ–≥–æ–º
        
        Args:
            text: —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
            tag: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (error, success, info, prompt)
        """
        self.output.configure(state="normal")
        if tag:
            self.output.insert(tk.END, text, tag)
        else:
            self.output.insert(tk.END, text)
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
        self.output.see(tk.END)
        self.output.mark_set(tk.INSERT, tk.END)
        self.output.configure(state="normal")  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Å–æ–ª–∏"""
        self.output.configure(state="normal")
        self.output.delete("1.0", tk.END)
        self.output.configure(state="normal")
        self.write("$ ", "prompt")
    
    def toggle(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏"""
        if self.frame.winfo_viewable():
            self.frame.pack_forget()
        else:
            self.frame.pack(fill="both", side="bottom", padx=0, pady=0, expand=False, height=150)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            self.output.focus_set()
    
    def terminate(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–æ–ª–æ—á–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.shell_process and self.shell_process.poll() is None:
            try:
                self.shell_process.terminate()
            except:
                pass
        self.shell_process = None 