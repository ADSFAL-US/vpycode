"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º –ò–ò –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–æ–¥–∞."""
import tkinter as tk
import customtkinter as ctk
from tkinter import scrolledtext, Frame, Scrollbar, Text, Button, Label, Menu, filedialog
import threading
import requests
import json
import re
import os
import time
import sys  # Add sys import for flush
import traceback  # Add traceback for better error reporting
import logging

from theme import KanagawaTheme
from ai_defaults import DEFAULT_AI_PROMPT, API_URL, DEFAULT_API_SETTINGS, CODE_BLOCK_PATTERN, READ_FILE_PATTERN, CODE_BLOCK_LINE_PATTERN, CODE_BLOCK_LINES_PATTERN, JSON_CODE_PATTERN, JSON_STOP_PATTERN, JSON_READ_FILE_PATTERN, JSON_EXECUTE_PATTERN

class AiChat:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º –ò–ò"""
    
    def __init__(self, parent, frame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ò–ò
        
        Args:
            parent: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            frame: —Ñ—Ä–µ–π–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —á–∞—Ç
        """
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_logging()
        
        # Debug - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ stdout —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.log_debug("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AI CHAT ===")
        self.log_debug(f"Python version: {sys.version}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._test_debug_output()
        
        self.parent = parent
        self.frame = frame
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.chat_messages = []
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.is_first_message = True
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
        self.response_active = False
        self.current_response = ""
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.stop_generation = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
        self.ai_settings = self._load_ai_settings()
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.last_project_structure = ""
        
        self._setup_ui()
        
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            log_dir = "logs"
            if not os.path.exists(log_dir):
                os.makedirs(log_dir)
                
            log_file = os.path.join(log_dir, f"ai_chat_{time.strftime('%Y%m%d_%H%M%S')}.log")
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è
            self.logger = logging.getLogger("ai_chat")
            self.logger.setLevel(logging.DEBUG)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
            file_handler = logging.FileHandler(log_file, encoding='utf-8')
            file_handler.setLevel(logging.DEBUG)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(logging.DEBUG)
            
            # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            formatter = logging.Formatter('[%(asctime)s][%(threadName)s] %(levelname)s: %(message)s')
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            if self.logger.handlers:
                self.logger.handlers.clear()
                
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
            self.logger.addHandler(file_handler)
            self.logger.addHandler(console_handler)
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ª–æ–≥–æ–≤ –≤–≤–µ—Ä—Ö –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
            self.logger.propagate = False
            
            # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
            self.logger.info(f"–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            traceback.print_exc()
            self.logger = None
    
    def log_debug(self, message):
        """–õ–æ–≥–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if hasattr(self, 'logger') and self.logger:
            self.logger.debug(message)
        
    def log_info(self, message):
        """–õ–æ–≥–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if hasattr(self, 'logger') and self.logger:
            self.logger.info(message)
        
    def log_error(self, message):
        """–õ–æ–≥–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if hasattr(self, 'logger') and self.logger:
            self.logger.error(message)
    
    def log_warning(self, message):
        """–õ–æ–≥–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        if hasattr(self, 'logger') and self.logger:
            self.logger.warning(message)
    
    def _load_ai_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∏–∑ —Ñ–∞–π–ª–∞"""
        ai_settings_file = "ai_settings.json"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if os.path.exists("settings.json"):
            try:
                with open("settings.json", "r", encoding="utf-8") as f:
                    settings = json.load(f)
                    if "ai_settings_file" in settings:
                        ai_settings_file = settings["ai_settings_file"]
            except:
                pass
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
        default_settings = {
            "initial_prompt": DEFAULT_AI_PROMPT,
            "api_settings": DEFAULT_API_SETTINGS,
            "code_insertion_enabled": True,
            "auto_continue_enabled": True
        }
        
        if os.path.exists(ai_settings_file):
            try:
                with open(ai_settings_file, "r", encoding="utf-8") as f:
                    loaded_settings = json.load(f)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ initial_prompt –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if "initial_prompt" not in loaded_settings or not loaded_settings["initial_prompt"]:
                        self.log_warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç initial_prompt –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ò–ò, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        loaded_settings["initial_prompt"] = DEFAULT_AI_PROMPT
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º auto_continue_enabled –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if "auto_continue_enabled" not in loaded_settings:
                        loaded_settings["auto_continue_enabled"] = True
                    
                    return loaded_settings
            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò: {str(e)}")
                return default_settings
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                with open(ai_settings_file, "w", encoding="utf-8") as f:
                    json.dump(default_settings, f, indent=4)
            except:
                pass
            return default_settings
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞ –ò–ò"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        ai_header = ctk.CTkFrame(self.frame, fg_color=KanagawaTheme.DARKER_BG, height=30)
        ai_header.pack(fill="x")
        
        ai_label = ctk.CTkLabel(ai_header, text="–ò–ò –ê–°–°–ò–°–¢–ï–ù–¢ (DeepSeek-R1)", 
                               text_color=KanagawaTheme.FOREGROUND, font=("Arial", 10, "bold"))
        ai_label.pack(side="left", padx=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        clear_btn = ctk.CTkButton(ai_header, text="üóëÔ∏è", width=25, height=20, 
                                fg_color="transparent", hover_color=KanagawaTheme.LIGHTER_BG,
                                text_color=KanagawaTheme.FOREGROUND, command=self.clear_history)
        clear_btn.pack(side="right", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI
        settings_btn = ctk.CTkButton(ai_header, text="‚öôÔ∏è", width=25, height=20, 
                                   fg_color="transparent", hover_color=KanagawaTheme.LIGHTER_BG,
                                   text_color=KanagawaTheme.FOREGROUND, 
                                   command=lambda: self.parent.show_settings_dialog("ai"))
        settings_btn.pack(side="right", padx=5)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
        chat_container = ctk.CTkFrame(self.frame, fg_color=KanagawaTheme.AI_BG)
        chat_container.pack(fill="both", expand=True, padx=5, pady=5)
        chat_container.pack_propagate(False)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        self.chat_history = tk.Text(
            chat_container, 
            wrap="word", 
            bd=0,
            bg=KanagawaTheme.AI_BG, 
            fg=KanagawaTheme.AI_USER_MSG,
            insertbackground=KanagawaTheme.CURSOR,
            font=("Consolas", 10), 
            padx=5, 
            pady=5
        )
        self.chat_history.pack(fill="both", expand=True, side="top")
        self.chat_history.configure(state="disabled")
        
        # –¢–µ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_history.tag_configure("user", foreground=KanagawaTheme.AI_USER_MSG)
        self.chat_history.tag_configure("bot", foreground=KanagawaTheme.AI_BOT_MSG)
        self.chat_history.tag_configure("system", foreground=KanagawaTheme.AI_ACCENT)
        self.chat_history.tag_configure("error", foreground=KanagawaTheme.CONSOLE_ERROR)
        self.chat_history.tag_configure("loading", foreground=KanagawaTheme.AI_BOT_MSG)
        self.chat_history.tag_configure("info", foreground=KanagawaTheme.CONSOLE_INFO)
        self.chat_history.tag_configure("code", foreground=KanagawaTheme.FUNCTION)
        self.chat_history.tag_configure("insert_button", foreground=KanagawaTheme.STRING)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞
        self.chat_history.tag_bind("insert_button", "<Button-1>", self._on_insert_code_click)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        scrollbar = ctk.CTkScrollbar(chat_container, command=self.chat_history.yview)
        scrollbar.pack(side="right", fill="y")
        self.chat_history.config(yscrollcommand=scrollbar.set)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        input_container = ctk.CTkFrame(self.frame, fg_color=KanagawaTheme.DARKER_BG)
        input_container.pack(fill="x", pady=(0, 5), padx=5)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.chat_input = tk.Text(
            input_container, 
            wrap="word", 
            height=3, 
            bd=0,
            bg=KanagawaTheme.BACKGROUND, 
            fg=KanagawaTheme.FOREGROUND,
            insertbackground=KanagawaTheme.CURSOR,
            font=("Consolas", 10), 
            padx=5, 
            pady=5
        )
        self.chat_input.pack(fill="both", expand=True, side="left", padx=5, pady=5)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.chat_input.insert("1.0", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –ò–ò...")
        self.chat_input.bind("<FocusIn>", lambda e: self.chat_input.delete("1.0", tk.END) if self.chat_input.get("1.0", tk.END).strip() == "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –ò–ò..." else None)
        self.chat_input.bind("<FocusOut>", lambda e: self.chat_input.insert("1.0", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –ò–ò...") if not self.chat_input.get("1.0", tk.END).strip() else None)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.chat_input.bind("<Return>", self._handle_enter)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        button_frame = ctk.CTkFrame(input_container, fg_color="transparent")
        button_frame.pack(side="right", padx=5, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.stop_button = ctk.CTkButton(
            button_frame, 
            text="‚èπÔ∏è", 
            width=40, 
            height=30,
            fg_color=KanagawaTheme.CONSOLE_ERROR,
            hover_color=KanagawaTheme.OPERATOR,
            text_color=KanagawaTheme.FOREGROUND,
            command=self.stop_response_generation
        )
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.send_button = ctk.CTkButton(
            button_frame, 
            text="‚ñ∂", 
            width=40, 
            height=30,
            fg_color=KanagawaTheme.AI_ACCENT,
            hover_color=KanagawaTheme.BUTTON_HOVER,
            text_color=KanagawaTheme.FOREGROUND,
            command=self.send_message
        )
        self.send_button.pack(side="right")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
        self.code_blocks = {}
        self.next_code_id = 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_bot_message("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek-R1. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á.")
    
    def _handle_enter(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Shift+Enter, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
        if event.state & 0x1:  # 0x1 - –º–∞—Å–∫–∞ –¥–ª—è Shift
            return
        
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.send_message()
        return "break"  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Enter
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = self.chat_input.get("1.0", tk.END).strip()
        if not message:
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if self.response_active:
            return
            
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.chat_input.delete("1.0", tk.END)
        
        # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        if message.lower() == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã":
            self.add_user_message(message)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
            self.chat_history.configure(state="normal")
            self.chat_history.insert(tk.END, "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ", "system")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                current_dir = os.getcwd()
                structure = self._get_simple_project_structure(current_dir)
                
                debug_info = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
                debug_info += f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}\n"
                debug_info += f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞: {'–î–∞' if structure else '–ù–µ—Ç'}\n"
                debug_info += f"–†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {len(structure)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                debug_info += f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:\n```\n{structure[:200]}...\n```\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                response = self._send_request_with_retries(structure)
                if response is not None:
                    self.chat_history.insert(tk.END, response, "user")
                else:
                    self.chat_history.insert(tk.END, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", "error")
                
            except Exception as e:
                self.chat_history.insert(tk.END, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}", "error")
            finally:
                self.chat_history.configure(state="disabled")

    def _send_request_with_retries(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ"""
        api_url = "YOUR_API_ENDPOINT"
        headers = {"Authorization": "Bearer YOUR_API_KEY"}
        retry_count = 0
        success = False

        while retry_count < 10:
            try:
                response = requests.post(api_url, headers=headers, json={"data": data})
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
                return response.json()  # –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            except requests.exceptions.RequestException as e:
                retry_count += 1
                wait_time = 2 ** retry_count  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                print(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry_count}/10 —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥.")
                time.sleep(wait_time)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

        print("–û—à–∏–±–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ.")
        return None  # –í–æ–∑–≤—Ä–∞—Ç None –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
    
    def _get_simple_project_structure(self, directory):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏"""
        structure = ""
        
        try:
            files = []
            dirs = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for item in os.listdir(directory):
                if item.startswith('.'):
                    continue
                full_path = os.path.join(directory, item)
                if os.path.isdir(full_path):
                    dirs.append(item)
                else:
                    files.append(item)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
            dirs.sort()
            files.sort()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for d in dirs:
                structure += f"üìÅ {d}/\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                try:
                    subdir = os.path.join(directory, d)
                    subitems = sorted(os.listdir(subdir))[:10]
                    for subitem in subitems:
                        if subitem.startswith('.'):
                            continue
                        if os.path.isdir(os.path.join(subdir, subitem)):
                            structure += f"  üìÅ {d}/{subitem}/\n"
                        else:
                            structure += f"  üìÑ {d}/{subitem}\n"
                except Exception as e:
                    structure += f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}\n"
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for f in files:
                structure += f"üìÑ {f}\n"
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
            structure = f"–û—à–∏–±–∫–∞: {str(e)}"
            
        return structure
    
    def _console_log(self, message):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º flush"""
        self.log_debug(message)
    
    def _generate_response(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        try:
            api_key = self.parent.settings.ai_api_key
            if not api_key:
                self._update_response(
                    "–û—à–∏–±–∫–∞: API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É ‚öôÔ∏è –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n" +
                    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ https://openrouter.ai –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.", 
                    "error"
                )
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                self.stop_button.pack_forget()
                self.send_button.pack(side="right")
                return
        except Exception as e:
            self._update_response(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: {str(e)}", "error")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            self.stop_button.pack_forget()
            self.send_button.pack(side="right")
            return
            
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = []
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        initial_prompt = self.ai_settings.get("initial_prompt", DEFAULT_AI_PROMPT)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—É—Å—Ç–∞
        if not initial_prompt or len(initial_prompt.strip()) == 0:
            self.log_warning("initial_prompt –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            initial_prompt = DEFAULT_AI_PROMPT
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
            self.ai_settings["initial_prompt"] = DEFAULT_AI_PROMPT
            try:
                with open("ai_settings.json", "w", encoding="utf-8") as f:
                    json.dump(self.ai_settings, f, indent=4)
            except Exception as e:
                self.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò: {str(e)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é 
        messages.append({
            "role": "system",
            "content": initial_prompt
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.log_debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª–∏–Ω–æ–π {len(initial_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –í–°–ï–ì–î–ê —Å–æ–±–∏—Ä–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            current_dir = os.getcwd()
            structure = ""
            
            files = []
            dirs = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for item in os.listdir(current_dir):
                if item.startswith('.'):
                    continue
                full_path = os.path.join(current_dir, item)
                if os.path.isdir(full_path):
                    dirs.append(item)
                else:
                    files.append(item)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
            dirs.sort()
            files.sort()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for d in dirs:
                structure += f"üìÅ {d}/\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                try:
                    subdir = os.path.join(current_dir, d)
                    subitems = sorted(os.listdir(subdir))[:10]
                    for subitem in subitems:
                        if subitem.startswith('.'):
                            continue
                        if os.path.isdir(os.path.join(subdir, subitem)):
                            structure += f"  üìÅ {d}/{subitem}/\n"
                        else:
                            structure += f"  üìÑ {d}/{subitem}\n"
                except Exception as e:
                    structure += f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}\n"
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for f in files:
                structure += f"üìÑ {f}\n"
            
        except Exception as e:
            structure = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
        if structure:
            structure_message = {
                "role": "system",
                "content": f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞:\n{structure}"
            }
            messages.append(structure_message)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.last_project_structure = structure
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
        messages.extend(self.chat_messages[-10:])
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.response_active = True
            self.current_response = ""
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            self._call_api_streaming(messages)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.stop_generation:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.parent.after(0, lambda: self.stop_button.pack_forget())
                self.parent.after(0, lambda: self.send_button.pack(side="right"))
                return
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            print("\n===== –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –û–¢ –ù–ï–ô–†–û–°–ï–¢–ò (–î–û –û–ë–†–ê–ë–û–¢–ö–ò) =====")
            print(self.current_response)
            print("===============================================\n")
            sys.stdout.flush()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            self.chat_messages.append({"role": "assistant", "content": self.current_response})
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            processed_result = self._process_code_blocks(self.current_response)
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω—É–ª None, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏
            # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å - –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            if processed_result is None:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                self.response_active = False
                return
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
            if processed_result != self.current_response:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
                self.chat_history.configure(state="normal")
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
                last_assistant = self.chat_history.search("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ", "end-1c linestart", backwards=True)
                if last_assistant:
                    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: "
                    start_pos = f"{last_assistant}+10c"  # 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: "
                    self.chat_history.delete(start_pos, "end-1c")
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self._format_final_response(processed_result)
                
                self.chat_history.configure(state="disabled")
                self.chat_history.see(tk.END)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            self.chat_history.configure(state="normal")
            self.chat_history.insert(tk.END, "\n\n")
            self.chat_history.configure(state="disabled")
            self.chat_history.see(tk.END)
            
        except Exception as e:
            error_message = str(e)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É 
            print(f"–û–®–ò–ë–ö–ê: {error_message}")
            sys.stdout.flush()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª
            try:
                log_dir = "logs"
                if not os.path.exists(log_dir):
                    os.makedirs(log_dir)
                traceback_file = os.path.join(log_dir, "traceback.log")
                with open(traceback_file, "a", encoding="utf-8") as f:
                    f.write(f"\n\n--- {time.strftime('%Y-%m-%d %H:%M:%S')} ---\n")
                    traceback.print_exc(file=f)
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª")
                sys.stdout.flush()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in error_message.lower():
                error_message += "\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:\n1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç OpenRouter\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª Billing\n3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞"
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
            self._update_response(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_message}", "error")
        finally:
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.parent.after(0, lambda: self.stop_button.pack_forget())
            self.parent.after(0, lambda: self.send_button.pack(side="right"))
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.response_active = False
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—ã–≤–µ–¥–µ–Ω—ã
            sys.stdout.flush()
    
    def _get_fresh_project_structure(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
            # 1. –û—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            # 2. –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            # 3. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
            
            if hasattr(self.parent, "current_project") and self.parent.current_project:
                project_dir = self.parent.current_project
                print(f"–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                project_dir = os.getcwd()
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç: {project_dir}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(project_dir) or not os.path.isdir(project_dir):
                print(f"–û–®–ò–ë–ö–ê: –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {project_dir}")
                return f"–ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {project_dir}"
                
            # –ù–û–í–´–ô –°–ü–û–°–û–ë: –†—É—á–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
            # –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–µ–Ω –∏ –ø—Ä–æ—Å—Ç, —á–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥
            print(f"–°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é...")
            structure = ""
            
            items = sorted(os.listdir(project_dir))
            files = [item for item in items if os.path.isfile(os.path.join(project_dir, item)) and not item.startswith('.')]
            dirs = [item for item in items if os.path.isdir(os.path.join(project_dir, item)) and not item.startswith('.')]
            
            # –í—ã–≤–æ–¥–∏–º —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for d in dirs:
                dir_path = os.path.join(project_dir, d)
                structure += f"üìÅ {d}/\n"
                try:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    subitems = sorted(os.listdir(dir_path))[:10]
                    for subitem in subitems:
                        if subitem.startswith('.'):
                            continue
                        if os.path.isdir(os.path.join(dir_path, subitem)):
                            structure += f"  üìÅ {d}/{subitem}/\n"
                        else:
                            structure += f"  üìÑ {d}/{subitem}\n"
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    total_items = len(os.listdir(dir_path))
                    if total_items > 10:
                        structure += f"  ... –∏ –µ—â–µ {total_items-10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
                except Exception as e:
                    structure += f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}\n"
            
            # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã
            for f in files:
                structure += f"üìÑ {f}\n"
            
            if not structure:
                print("–í–ù–ò–ú–ê–ù–ò–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—É—Å—Ç–∞.")
                return "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
            
            print(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ ({len(structure)} —Å–∏–º–≤–æ–ª–æ–≤)")
            # –í—ã–≤–µ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            preview = structure[:200] + "..." if len(structure) > 200 else structure
            print(f"–§—Ä–∞–≥–º–µ–Ω—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {preview}")
            
            return structure
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
    
    def _handle_file_read_request(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if not os.path.isabs(file_path):
                if hasattr(self.parent, "current_project") and self.parent.current_project:
                    file_path = os.path.join(self.parent.current_project, file_path)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—É—Å–∫–∞
                    file_path = os.path.join(os.getcwd(), file_path)
            
            print(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                self._update_response(f"\n–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
                return
            
            # –õ–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –ú–ë)
            max_file_size = 1024 * 1024
            if os.path.getsize(file_path) > max_file_size:
                self._update_response(f"\n–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —á—Ç–µ–Ω–∏—è (> 1 –ú–ë).", "error")
                return
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    file_content = f.read()
                    print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            except UnicodeDecodeError:
                try:
                    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    with open(file_path, 'r', encoding='latin-1') as f:
                        file_content = f.read()
                        print(f"–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ latin-1: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                    self._update_response(f"\n–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É.", "error")
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
            self._update_response(f"–ß–∏—Ç–∞—é —Ñ–∞–π–ª: {os.path.basename(file_path)}\n", "info")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞
            message = f"""–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_path}':

```
{file_content}
```

–î–ï–ô–°–¢–í–£–ô –° –§–ê–ô–õ–û–ú: –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –≤–∏–¥–∏—à—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞. –ù–ï –Ω—É–∂–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏ –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
–ü–û–ú–ù–ò:
1. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–µ—Ä—ã ###CODE_INSERT –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
2. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
3. –ù–ï –Ω—É–∂–Ω–æ –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã ###CODE_INSERT –≤ –±–ª–æ–∫–∏ ```."""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            self.chat_messages.append({"role": "user", "content": message})
            
            # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, —Ç.–∫. —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å
            # self.add_user_message(message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
            self.chat_history.configure(state="normal")
            self.chat_history.insert(tk.END, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...", "info")
            self.chat_history.configure(state="disabled")
            self.chat_history.see(tk.END)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
            threading.Thread(target=self._generate_response, args=(message,)).start()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            self._update_response(f"\n–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", "error")
            
    def _process_code_blocks(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        processed_message = message
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å JSON –±–ª–æ–∫–∏
        json_result = self._process_json_code_blocks(processed_message)
        # –ï—Å–ª–∏ JSON-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω—É–ª None, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏
        # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if json_result is None:
            return None
        
        # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        processed_message = json_result
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ JSON-–±–ª–æ–∫–æ–≤
        # –∫–æ—Ç–æ—Ä—ã–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if processed_message == message:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("\n===== –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢ –° –ú–ê–†–ö–ï–†–ê–ú–ò –í–°–¢–ê–í–ö–ò –ö–û–î–ê (–î–û –û–ë–†–ê–ë–û–¢–ö–ò) =====")
            print(message)
            print("================================================================\n")
            sys.stdout.flush()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ–≥–æ–≤ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏
            line_matches = re.findall(CODE_BLOCK_LINE_PATTERN, message, re.DOTALL)
            if line_matches:
                for match_idx, (line_num, code_content) in enumerate(line_matches):
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞
                    print(f"\n=== –ù–ê–ô–î–ï–ù –ë–õ–û–ö –ö–û–î–ê –î–õ–Ø –°–¢–†–û–ö–ò {line_num} (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç) ===")
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞:\n{code_content}")
                    print("=======================================\n")
                    sys.stdout.flush()
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–¥–∞
                    code_content = code_content.strip()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    tag = f"```\n{code_content}\n```"
                    
                    # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã
                    full_tag_pattern = r'###CODE_INSERT:' + re.escape(line_num) + r'\s*(.*?)###END_INSERT'
                    full_tag_match = re.search(full_tag_pattern, message, re.DOTALL)
                    
                    if full_tag_match:
                        original_tag = full_tag_match.group(0)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                        code_id = self.next_code_id
                        self.code_blocks[code_id] = {
                            'type': 'line',
                            'line': int(line_num),
                            'code': code_content,
                            'language': ""
                        }
                        self.next_code_id += 1
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        insert_button = f"\n{tag}\n[–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ —Å—Ç—Ä–æ–∫—É {line_num}] (ID: {code_id})\n"
                        processed_message = processed_message.replace(original_tag, insert_button)
                        
                        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
                        if self.ai_settings.get("code_insertion_enabled", True):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                            if hasattr(self.parent, '_insert_code_to_editor'):
                                self.parent._insert_code_to_editor(code_content, "line", int(line_num), None, None)
                                processed_message = processed_message.replace(insert_button, 
                                    f"\n{tag}\n\n*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É {line_num}*\n")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫
            lines_matches = re.findall(CODE_BLOCK_LINES_PATTERN, message, re.DOTALL)
            if lines_matches:
                for match_idx, (start_line, end_line, code_content) in enumerate(lines_matches):
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞
                    print(f"\n=== –ù–ê–ô–î–ï–ù –ë–õ–û–ö –ö–û–î–ê –î–õ–Ø –°–¢–†–û–ö {start_line}-{end_line} (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç) ===")
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞:\n{code_content}")
                    print("=======================================\n")
                    sys.stdout.flush()
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–¥–∞
                    code_content = code_content.strip()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    tag = f"```\n{code_content}\n```"
                    
                    # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã
                    full_tag_pattern = r'###CODE_INSERT:' + re.escape(start_line) + r'-' + re.escape(end_line) + r'\s*(.*?)###END_INSERT'
                    full_tag_match = re.search(full_tag_pattern, message, re.DOTALL)
                    
                    if full_tag_match:
                        original_tag = full_tag_match.group(0)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                        code_id = self.next_code_id
                        self.code_blocks[code_id] = {
                            'type': 'range',
                            'start_line': int(start_line),
                            'end_line': int(end_line),
                            'code': code_content,
                            'language': ""
                        }
                        self.next_code_id += 1
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        insert_button = f"\n{tag}\n[–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ {start_line}-{end_line} –∫–æ–¥–æ–º] (ID: {code_id})\n"
                        processed_message = processed_message.replace(original_tag, insert_button)
                        
                        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
                        if self.ai_settings.get("code_insertion_enabled", True):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                            if hasattr(self.parent, '_insert_code_to_editor'):
                                self.parent._insert_code_to_editor(code_content, "range", None, int(start_line), int(end_line))
                                processed_message = processed_message.replace(insert_button, 
                                    f"\n{tag}\n\n*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏–ª —Å—Ç—Ä–æ–∫–∏ {start_line}-{end_line}*\n")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∫–æ–¥–∞ (–±–µ–∑ —Å—Ç—Ä–æ–∫–∏)
            standard_matches = re.findall(CODE_BLOCK_PATTERN, message, re.DOTALL)
            if standard_matches:
                for match_idx, code_content in enumerate(standard_matches):
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞
                    print(f"\n=== –ù–ê–ô–î–ï–ù –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ë–õ–û–ö –ö–û–î–ê (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç) ===")
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞:\n{code_content}")
                    print("=======================================\n")
                    sys.stdout.flush()
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–¥–∞
                    code_content = code_content.strip()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    tag = f"```\n{code_content}\n```"
                    
                    # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã
                    full_tag_pattern = r'###CODE_INSERT\s+(.*?)###END_INSERT'
                    full_tag_match = re.search(full_tag_pattern, message, re.DOTALL)
                    
                    if full_tag_match:
                        original_tag = full_tag_match.group(0)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                        code_id = self.next_code_id
                        self.code_blocks[code_id] = {
                            'type': 'standard',
                            'code': code_content,
                            'language': ""
                        }
                        self.next_code_id += 1
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        insert_button = f"\n{tag}\n[–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä] (ID: {code_id})\n"
                        processed_message = processed_message.replace(original_tag, insert_button)
                        
                        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
                        if self.ai_settings.get("code_insertion_enabled", True):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                            if hasattr(self.parent, '_insert_code_to_editor'):
                                self.parent._insert_code_to_editor(code_content, "standard", None, None, None)
                                processed_message = processed_message.replace(insert_button, 
                                    f"\n{tag}\n\n*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä*\n")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Ç–µ–≥–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_read_match = re.search(READ_FILE_PATTERN, message, re.DOTALL)
            if file_read_match:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file_path = file_read_match.group(1).strip()
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                print(f"\n=== –ù–ê–ô–î–ï–ù –ó–ê–ü–†–û–° –ù–ê –ß–¢–ï–ù–ò–ï –§–ê–ô–õ–ê: {file_path} (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç) ===")
                sys.stdout.flush()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                self.chat_messages.append({"role": "assistant", "content": message})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self._update_response(f"\n*–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç): {file_path}*\n", "info")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(target=self._handle_file_read_request, args=(file_path,)).start()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                return None
        
        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫, –ª–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        print("\n===== –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (–ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–î–ê) =====")
        print(processed_message)
        print("========================================================\n")
        sys.stdout.flush()
        
        return processed_message
    
    def _process_json_code_blocks(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        import json
        processed_message = message
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JSON –±–ª–æ–∫–æ–≤
        print("\n===== –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢ –° JSON –ë–õ–û–ö–ê–ú–ò –ö–û–î–ê (–î–û –û–ë–†–ê–ë–û–¢–ö–ò) =====")
        print(message)
        print("================================================================\n")
        sys.stdout.flush()
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å JSON –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ markdown-–±–ª–æ–∫–∞—Ö)
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–±—ã—Ö JSON-–æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏
            direct_json_pattern = r'\{(?:[^{}]|(?:\{[^{}]*\}))*\}'
            direct_matches = re.findall(direct_json_pattern, message, re.DOTALL)
            
            for json_str in direct_matches:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ JSON –æ–±—ä–µ–∫—Ç–æ–º
                    json_obj = json.loads(json_str)
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ JSON —Å –ø–æ–ª–µ–º type, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                    if isinstance(json_obj, dict) and "type" in json_obj:
                        json_type = json_obj.get("type")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                        if json_type == "read_file" and "path" in json_obj:
                            file_path = json_obj["path"]
                            print(f"\n=== –ù–ê–ô–î–ï–ù –ü–†–Ø–ú–û–ô JSON-–ó–ê–ü–†–û–° –ù–ê –ß–¢–ï–ù–ò–ï –§–ê–ô–õ–ê: {file_path} ===")
                            sys.stdout.flush()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                            self.chat_messages.append({"role": "assistant", "content": message})
                            self._update_response(f"\n*–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}*\n", "info")
                            threading.Thread(target=self._handle_json_file_read_request, args=(file_path,)).start()
                            return None
                            
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        elif json_type == "execute" and "command" in json_obj:
                            command = json_obj["command"]
                            print(f"\n=== –ù–ê–ô–î–ï–ù –ü–†–Ø–ú–û–ô JSON-–ó–ê–ü–†–û–° –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î–´: {command} ===")
                            sys.stdout.flush()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                            self.chat_messages.append({"role": "assistant", "content": message})
                            self._update_response(f"\n*–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}*\n", "info")
                            threading.Thread(target=self._handle_json_execute_request, args=(command,)).start()
                            return None
                            
                except json.JSONDecodeError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON
                    pass
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: {str(e)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä—è–º—ã—Ö JSON: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        read_file_matches = re.findall(JSON_READ_FILE_PATTERN, message, re.DOTALL)
        if read_file_matches:
            for json_str in read_file_matches:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    data = json.loads(json_str)
                    file_path = data.get("path", "")
                    
                    if not file_path:
                        continue
                        
                    # –ù–∞—à–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
                    print(f"\n=== –ù–ê–ô–î–ï–ù JSON-–ó–ê–ü–†–û–° –ù–ê –ß–¢–ï–ù–ò–ï –§–ê–ô–õ–ê: {file_path} ===")
                    sys.stdout.flush()
                    
                    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    original_block = f"```json\n{json_str}\n```"
                    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–µ–∑ "json"
                    if original_block not in message:
                        original_block = f"```\n{json_str}\n```"
                        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º JSON
                        if original_block not in message:
                            original_block = json_str
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    self.chat_messages.append({"role": "assistant", "content": message})
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self._update_response(f"\n*–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}*\n", "info")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    threading.Thread(target=self._handle_json_file_read_request, args=(file_path,)).start()
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    return None
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        execute_matches = re.findall(JSON_EXECUTE_PATTERN, message, re.DOTALL)
        if execute_matches:
            for json_str in execute_matches:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    data = json.loads(json_str)
                    command = data.get("command", "")
                    
                    if not command:
                        continue
                    
                    # –ù–∞—à–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
                    print(f"\n=== –ù–ê–ô–î–ï–ù JSON-–ó–ê–ü–†–û–° –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î–´: {command} ===")
                    sys.stdout.flush()
                    
                    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    original_block = f"```json\n{json_str}\n```"
                    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–µ–∑ "json"
                    if original_block not in message:
                        original_block = f"```\n{json_str}\n```"
                        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º JSON
                        if original_block not in message:
                            original_block = json_str
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    self.chat_messages.append({"role": "assistant", "content": message})
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self._update_response(f"\n*–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}*\n", "info")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    threading.Thread(target=self._handle_json_execute_request, args=(command,)).start()
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    return None
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        json_matches = re.findall(JSON_CODE_PATTERN, message, re.DOTALL)
        if json_matches:
            for json_str in json_matches:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    code_data = json.loads(json_str)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                    if "type" in code_data and code_data["type"] == "code_insert" and "code" in code_data:
                        code_content = code_data["code"].strip()
                        code_type = code_data.get("insert_type", "standard")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                        tag = f"```\n{code_content}\n```"
                        
                        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã
                        original_block = f"```json\n{json_str}\n```"
                        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–µ–∑ "json"
                        if original_block not in message:
                            original_block = f"```\n{json_str}\n```"
                            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º JSON
                            if original_block not in message:
                                original_block = json_str
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                        code_id = self.next_code_id
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Å—Ç–∞–≤–∫–∏ –∏ –¥–µ–π—Å—Ç–≤—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                        if code_type == "line" and "line" in code_data:
                            # –í—Å—Ç–∞–≤–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                            line_num = int(code_data["line"])
                            self.code_blocks[code_id] = {
                                'type': 'line',
                                'line': line_num,
                                'code': code_content,
                                'language': code_data.get("language", "")
                            }
                            
                            # –ó–∞–º–µ–Ω—è–µ–º JSON –±–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            insert_button = f"\n{tag}\n[–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ —Å—Ç—Ä–æ–∫—É {line_num}] (ID: {code_id})\n"
                            processed_message = processed_message.replace(original_block, insert_button)
                            
                            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
                            if self.ai_settings.get("code_insertion_enabled", True):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                                if hasattr(self.parent, '_insert_code_to_editor'):
                                    self.parent._insert_code_to_editor(code_content, "line", line_num, None, None)
                                    processed_message = processed_message.replace(insert_button, 
                                        f"\n{tag}\n\n*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É {line_num}*\n")
                            
                        elif code_type == "range" and "start_line" in code_data and "end_line" in code_data:
                            # –ó–∞–º–µ–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫
                            start_line = int(code_data["start_line"])
                            end_line = int(code_data["end_line"])
                            self.code_blocks[code_id] = {
                                'type': 'range',
                                'start_line': start_line,
                                'end_line': end_line,
                                'code': code_content,
                                'language': code_data.get("language", "")
                            }
                            
                            # –ó–∞–º–µ–Ω—è–µ–º JSON –±–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            insert_button = f"\n{tag}\n[–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ {start_line}-{end_line} –∫–æ–¥–æ–º] (ID: {code_id})\n"
                            processed_message = processed_message.replace(original_block, insert_button)
                            
                            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
                            if self.ai_settings.get("code_insertion_enabled", True):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                                if hasattr(self.parent, '_insert_code_to_editor'):
                                    self.parent._insert_code_to_editor(code_content, "range", None, start_line, end_line)
                                    processed_message = processed_message.replace(insert_button, 
                                        f"\n{tag}\n\n*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏–ª —Å—Ç—Ä–æ–∫–∏ {start_line}-{end_line}*\n")
                        
                        else:
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                            self.code_blocks[code_id] = {
                                'type': 'standard',
                                'code': code_content,
                                'language': code_data.get("language", "")
                            }
                            
                            # –ó–∞–º–µ–Ω—è–µ–º JSON –±–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            insert_button = f"\n{tag}\n[–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä] (ID: {code_id})\n"
                            processed_message = processed_message.replace(original_block, insert_button)
                            
                            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
                            if self.ai_settings.get("code_insertion_enabled", True):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                                if hasattr(self.parent, '_insert_code_to_editor'):
                                    self.parent._insert_code_to_editor(code_content, "standard", None, None, None)
                                    processed_message = processed_message.replace(insert_button, 
                                        f"\n{tag}\n\n*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä*\n")
                        
                        self.next_code_id += 1
                        
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∫–∞–∫ –µ—Å—Ç—å
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON –±–ª–æ–∫–∞ –∫–æ–¥–∞: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON Stop –±–ª–æ–∫–æ–≤
        stop_matches = re.findall(JSON_STOP_PATTERN, message, re.DOTALL)
        if stop_matches:
            for json_str in stop_matches:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    stop_data = json.loads(json_str)
                    message_text = stop_data.get("message", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã
                    original_block = f"```json\n{json_str}\n```"
                    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–µ–∑ "json"
                    if original_block not in message:
                        original_block = f"```\n{json_str}\n```"
                        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º JSON
                        if original_block not in message:
                            original_block = json_str
                    
                    # –ó–∞–º–µ–Ω—è–µ–º Stop –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    processed_message = processed_message.replace(original_block, f"\n*{message_text}*\n")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    if self.ai_settings.get("auto_continue_enabled", True):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        if hasattr(self.parent, '_generate_ai_response'):
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                            def continue_generation():
                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                                time.sleep(0.5)
                                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
                                if hasattr(self.parent, 'is_generating'):
                                    self.parent.is_generating = True
                                    threading.Thread(target=self.parent._generate_ai_response).start()
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            threading.Thread(target=continue_generation).start()
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ stop –±–ª–æ–∫–µ: {str(e)}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON stop –±–ª–æ–∫–∞: {str(e)}")
        
        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫, –ª–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        print("\n===== –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (–ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò JSON –ö–û–î–ê) =====")
        print(processed_message)
        print("========================================================\n")
        sys.stdout.flush()
        
        return processed_message
        
    def _handle_json_file_read_request(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON-–∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON-–∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if not os.path.isabs(file_path):
                if hasattr(self.parent, "current_project") and self.parent.current_project:
                    file_path = os.path.join(self.parent.current_project, file_path)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—É—Å–∫–∞
                    file_path = os.path.join(os.getcwd(), file_path)
            
            print(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                self._update_response(f"\n–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
                return
            
            # –õ–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –ú–ë)
            max_file_size = 1024 * 1024
            if os.path.getsize(file_path) > max_file_size:
                self._update_response(f"\n–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —á—Ç–µ–Ω–∏—è (> 1 –ú–ë).", "error")
                return
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    file_content = f.read()
                    print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            except UnicodeDecodeError:
                try:
                    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    with open(file_path, 'r', encoding='latin-1') as f:
                        file_content = f.read()
                        print(f"–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ latin-1: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                    self._update_response(f"\n–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É.", "error")
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
            message = f"""–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_path}':

```
{file_content}
```

–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –≤–∏–¥–∏—à—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏. –ü–æ–º–Ω–∏ –æ JSON-—Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            self.chat_messages.append({"role": "user", "content": message})
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
            self.chat_history.configure(state="normal")
            self.chat_history.insert(tk.END, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...", "info")
            self.chat_history.configure(state="disabled")
            self.chat_history.see(tk.END)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
            threading.Thread(target=self._generate_response, args=(message,)).start()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            self._update_response(f"\n–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", "error")
            
    def _handle_json_execute_request(self, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            unsafe_commands = ["rm -rf", "format", "del /", "deltree"]
            if any(unsafe_cmd in command.lower() for unsafe_cmd in unsafe_commands):
                self._update_response(f"\n–û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", "error")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            import subprocess
            self._update_response(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}\n", "info")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True,
                    timeout=30  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 30 —Å–µ–∫—É–Ω–¥–∞–º–∏
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                stdout = result.stdout
                stderr = result.stderr
                exit_code = result.returncode
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                output = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥ {exit_code}):\n\n"
                
                if stdout:
                    output += f"STDOUT:\n```\n{stdout}\n```\n\n"
                
                if stderr:
                    output += f"STDERR:\n```\n{stderr}\n```\n\n"
                
                if not stdout and not stderr:
                    output += "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞.\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                message = f"""–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}':

{output}

–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–º–Ω–∏ –æ JSON-—Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                self.chat_messages.append({"role": "user", "content": message})
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
                self._update_response(output, "info")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                threading.Thread(target=self._generate_response, args=(message,)).start()
                
            except subprocess.TimeoutExpired:
                self._update_response(f"\n–û—à–∏–±–∫–∞: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '{command}' –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É (>30 —Å–µ–∫).", "error")
            except Exception as e:
                self._update_response(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}", "error")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            self._update_response(f"\n–û—à–∏–±–∫–∞: {str(e)}", "error")
    
    def _on_insert_code_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        index = self.chat_history.index(f"@{event.x},{event.y}")
        line_start = self.chat_history.index(f"{index} linestart")
        line_end = self.chat_history.index(f"{index} lineend")
        line_text = self.chat_history.get(line_start, line_end)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–ª–æ–∫–∞ –∫–æ–¥–∞
        match = re.search(r'ID: (\d+)', line_text)
        if match:
            code_id = int(match.group(1))
            if code_id in self.code_blocks:
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–¥–∞
                print(f"DEBUG: –í—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞ ID={code_id}:")
                print(f"DEBUG: –¢–∏–ø –≤—Å—Ç–∞–≤–∫–∏: {self.code_blocks[code_id].get('type', 'standard')}")
                if self.code_blocks[code_id].get('type') == 'line':
                    print(f"DEBUG: –°—Ç—Ä–æ–∫–∞: {self.code_blocks[code_id].get('line')}")
                elif self.code_blocks[code_id].get('type') == 'range':
                    print(f"DEBUG: –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: {self.code_blocks[code_id].get('start_line')}-{self.code_blocks[code_id].get('end_line')}")
                print(f"DEBUG: –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:\n{self.code_blocks[code_id].get('code', '')}")
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≤—Å—Ç–∞–≤–∫–∏
                self._insert_code_to_editor(self.code_blocks[code_id])
    
    def _insert_code_to_editor(self, code_info):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤ —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        if not hasattr(self.parent, 'code_editor'):
            self.add_bot_message("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞", "error")
            return
            
        try:
            code_type = code_info.get('type', 'standard')
            
            if code_type == 'standard':
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                code = code_info.get('code', '')
                self.parent.code_editor.insert(tk.INSERT, code)
                self.parent.status_text.configure(text="–ö–æ–¥ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
                
            elif code_type == 'line':
                # –í—Å—Ç–∞–≤–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                line_num = code_info.get('line', 1)
                code = code_info.get('code', '')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                text = self.parent.code_editor.get("1.0", tk.END)
                lines = text.split("\n")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
                if line_num <= 0:
                    line_num = 1
                if line_num > len(lines):
                    line_num = len(lines) + 1
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                insert_position = f"{line_num}.0"
                self.parent.code_editor.insert(insert_position, code + "\n")
                self.parent.status_text.configure(text=f"–ö–æ–¥ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É {line_num}")
                
            elif code_type == 'range':
                # –ó–∞–º–µ–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫
                start_line = code_info.get('start_line', 1)
                end_line = code_info.get('end_line', 1)
                code = code_info.get('code', '')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                text = self.parent.code_editor.get("1.0", tk.END)
                lines = text.split("\n")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
                if start_line <= 0:
                    start_line = 1
                if end_line > len(lines):
                    end_line = len(lines)
                if start_line > end_line:
                    start_line, end_line = end_line, start_line
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
                start_position = f"{start_line}.0"
                end_position = f"{end_line}.end"
                self.parent.code_editor.delete(start_position, end_position)
                self.parent.code_editor.insert(start_position, code)
                self.parent.status_text.configure(text=f"–ó–∞–º–µ–Ω–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ {start_line}-{end_line}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self.parent.update_line_numbers()
            self.parent.highlight_syntax()
            self.parent.highlight_current_line()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
            self.add_bot_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}", "error")
    
    def _format_final_response(self, message):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
        message_lines = message.split('\n')
        
        # –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        in_code_block = False
        
        for line in message_lines:
            if line.startswith('```'):
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–¥–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
                in_code_block = not in_code_block
                self.chat_history.insert(tk.END, f"{line}\n", "code")
            elif in_code_block:
                # –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                self.chat_history.insert(tk.END, f"{line}\n", "code")
            elif line.strip().startswith('[–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä') or line.strip().startswith('[–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏'):
                # –ö–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞
                self.chat_history.insert(tk.END, f"{line}\n", "insert_button")
            elif line.strip().startswith('*–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–µ
                self.chat_history.insert(tk.END, f"{line}\n", "info")
            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                self.chat_history.insert(tk.END, f"{line}\n", "bot")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        print("\n===== –ò–¢–û–ì–û–í–´–ô –û–¢–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢ =====")
        print(message)
        print("=======================================\n")
        sys.stdout.flush()
    
    def _call_api_streaming(self, messages):
        """–í—ã–∑—ã–≤–∞–µ—Ç OpenRouter API –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏"""
        api_key = self.parent.settings.ai_api_key
        api_url = API_URL
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        api_settings = self.ai_settings.get("api_settings", DEFAULT_API_SETTINGS)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        system_message_exists = False
        default_system_message_index = -1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        for i, msg in enumerate(messages):
            if msg.get('role') == 'system' and '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã' not in msg.get('content', '').lower():
                system_message_exists = True
                default_system_message_index = i
                break
        
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if not system_message_exists:
            self.log_warning("–í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é –µ—ë")
            initial_prompt = self.ai_settings.get("initial_prompt", DEFAULT_AI_PROMPT)
            if not initial_prompt or len(initial_prompt.strip()) == 0:
                initial_prompt = DEFAULT_AI_PROMPT
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages.insert(0, {
                "role": "system",
                "content": initial_prompt
            })
        elif default_system_message_index >= 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if not messages[default_system_message_index].get('content'):
                self.log_warning("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ, –∑–∞–º–µ–Ω—è—é –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                messages[default_system_message_index]['content'] = DEFAULT_AI_PROMPT
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        
        data = {
            "model": api_settings.get("model", "deepseek/deepseek-r1"),
            "messages": messages,
            "temperature": api_settings.get("temperature", 0.7),
            "stream": True  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
        has_project_structure = False
        
        for i, msg in enumerate(messages):
            role = msg.get('role', 'unknown')
            content = msg.get('content', '')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if role == 'system' and '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã' in content.lower():
                has_project_structure = True
                
        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é
        if not has_project_structure:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            try:
                current_dir = os.getcwd()
                structure = self._get_simple_project_structure(current_dir)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                if structure:
                    structure_message = {
                        "role": "system", 
                        "content": f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞:\n{structure}"
                    }
                    messages.append(structure_message)
                    data["messages"] = messages  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
                sys.stdout.flush()
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API
            with requests.post(api_url, headers=headers, json=data, stream=True) as response:
                if response.status_code != 200:
                    self._handle_api_error(response)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                read_file_tag_found = False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                chunk_counter = 0
                
                for line in response.iter_lines():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if self.stop_generation:
                        return
                        
                    if not line:
                        continue
                    
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'data: '
                    line_text = line.decode('utf-8')
                    if line_text.startswith('data: '):
                        line_text = line_text[6:]  # –£–¥–∞–ª—è–µ–º 'data: '
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if line_text == '[DONE]':
                        break
                    
                    try:
                        chunk = json.loads(line_text)
                        if "choices" in chunk and len(chunk["choices"]) > 0:
                            delta = chunk["choices"][0].get("delta", {})
                            content = delta.get("content", "")
                            
                            if content:
                                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
                                chunk_counter += 1
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                                if "<read-file>" in (self.current_response + content):
                                    read_file_tag_found = True
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –æ—Ç–≤–µ—Ç—É
                                self.current_response += content
                                
                                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–≥–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º
                                if read_file_tag_found and re.search(r'<read-file>\s*([^<\s][^<]*?)\s*</read-file>', self.current_response):
                                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ –≤—ã—Ö–æ–¥–∏–º
                                    self._append_streaming_chunk(content)
                                    return
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤—ã–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º
                                self._append_streaming_chunk(content)
                                
                    except json.JSONDecodeError:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è JSON
                        pass
                
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}")
            sys.stdout.flush()
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}")
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if not self.stop_generation:
                print(f"–û—à–∏–±–∫–∞ –≤ _call_api_streaming: {str(e)}")
                sys.stdout.flush()
                self._log_exception()
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: {str(e)}")
    
    def _log_exception(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å—Ç–µ–∫–æ–º –≤—ã–∑–æ–≤–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            exc_type, exc_value, exc_traceback = sys.exc_info()
            lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –ª–æ–≥–∞
            stack_trace = ''.join(lines)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
            self.log_error(f"Stack trace:\n{stack_trace}")
            
            # –¢–∞–∫–∂–µ –ø–∏—à–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            try:
                log_dir = "logs"
                if not os.path.exists(log_dir):
                    os.makedirs(log_dir)
                    
                with open(os.path.join(log_dir, "exceptions.log"), "a", encoding="utf-8") as f:
                    f.write(f"\n\n--- {time.strftime('%Y-%m-%d %H:%M:%S')} ---\n")
                    f.write(stack_trace)
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª")
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ _log_exception –¥–∞–ª —Å–±–æ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
            print("ERROR: Failed to log exception details")
            traceback.print_exc()
    
    def log_warning(self, message):
        """–õ–æ–≥–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        if hasattr(self, 'logger') and self.logger:
            self.logger.warning(message)
        print(f"WARNING: {message}")
        sys.stdout.flush()
    
    def _append_streaming_chunk(self, chunk):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç"""
        def update():
            try:
                self.chat_history.configure(state="normal")
                self.chat_history.insert(tk.END, chunk, "bot")
                self.chat_history.see(tk.END)
                self.chat_history.configure(state="disabled")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
                sys.stdout.flush()
                self._log_exception()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.parent.after(0, update)
    
    def _handle_api_error(self, response):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log_debug(f"_handle_api_error called with status code: {response.status_code}")
        
        try:
            error_json = response.json()
            error_info = error_json.get("error", {})
            error_message = error_info.get("message", "")
            self.log_debug(f"API returned error: {error_message}")
        except json.JSONDecodeError:
            error_json = {}
            error_info = {}
            error_message = response.text
            self.log_debug(f"Could not parse JSON from API error. Raw response: {response.text[:200]}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—É
        if response.status_code == 401:
            error_text = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API-–∫–ª—é—á–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            self._update_response(error_text, "error")
            self.log_debug(f"401 error: {error_text}")
            raise Exception(error_text)
        
        elif response.status_code == 402:
            if "Insufficient funds" in error_message or "Insufficient Balance" in error_message:
                error_text = "–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É OpenRouter –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
                self._update_response(error_text, "error")
                self.log_debug(f"402 insufficient funds: {error_text}")
                raise Exception(error_text)
            error_text = "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã API: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É OpenRouter."
            self._update_response(error_text, "error")
            self.log_debug(f"402 error: {error_text}")
            raise Exception(error_text)
        
        elif response.status_code == 403:
            error_text = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ API –∏–ª–∏ –º–æ–¥–µ–ª–∏."
            self._update_response(error_text, "error")
            self.log_debug(f"403 error: {error_text}")
            raise Exception(error_text)
        
        elif response.status_code == 404:
            error_text = "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            self._update_response(error_text, "error")
            self.log_debug(f"404 error: {error_text}")
            raise Exception(error_text)
        
        elif response.status_code == 429:
            error_text = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º."
            self._update_response(error_text, "error")
            self.log_debug(f"429 error: {error_text}")
            raise Exception(error_text)
        
        elif response.status_code >= 500:
            error_text = f"–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ OpenRouter (–∫–æ–¥ {response.status_code}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            self._update_response(error_text, "error")
            self.log_debug(f"500+ error: {error_text}")
            raise Exception(error_text)
        
        # –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        error_text = f"–û—à–∏–±–∫–∞ API OpenRouter (–∫–æ–¥ {response.status_code}): {error_message}"
        self._update_response(error_text, "error")
        self.log_debug(f"Unhandled API error: {error_text}")
        raise Exception(error_text)
    
    def show_api_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å API"""
        help_text = """
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å OpenRouter API:

1. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á:
   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ https://openrouter.ai
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Üí Settings ‚Üí API Keys
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API-–∫–ª—é—á –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ

2. –ß–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –æ—à–∏–±–∫–∏:
   - –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   - –û—à–∏–±–∫–∞ 402: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å
   - –û—à–∏–±–∫–∞ 429: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API:
   - –í —Ñ–∞–π–ª–µ ai_settings.json –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   - –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

4. –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:
   - –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ https://openrouter.ai
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª Billing
   - –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞

5. –û –º–æ–¥–µ–ª–∏ DeepSeek-R1:
   - DeepSeek-R1 - –º–æ—â–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å —à–∏—Ä–æ–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
   - –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å OpenRouter, –∫–æ—Ç–æ—Ä—ã–π –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å API –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenRouter.
"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        self.add_bot_message(help_text, "info")
    
    def _update_response(self, message, tag="bot"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ò–ò"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def update():
            self.chat_history.configure(state="normal")
            self.chat_history.insert(tk.END, message, tag)
            self.chat_history.insert(tk.END, "\n\n")
            self.chat_history.see(tk.END)
            self.chat_history.configure(state="disabled")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.parent.after(0, update)
    
    def add_user_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        self.chat_history.configure(state="normal")
        self.chat_history.insert(tk.END, "–í—ã: ", "system")
        self.chat_history.insert(tk.END, f"{message}\n\n", "user")
        self.chat_history.configure(state="disabled")
        self.chat_history.see(tk.END)
    
    def add_bot_message(self, message, tag="bot"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        self.chat_history.configure(state="normal")
        self.chat_history.insert(tk.END, "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ", "system")
        self.chat_history.insert(tk.END, f"{message}\n\n", tag)
        self.chat_history.configure(state="disabled")
        self.chat_history.see(tk.END)
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        self.chat_history.configure(state="normal")
        self.chat_history.delete("1.0", tk.END)
        self.chat_history.configure(state="disabled")
        self.chat_messages = []
        self.code_blocks = {}
        self.next_code_id = 1
        self.is_first_message = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_bot_message("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
    
    def toggle(self):
        """For backwards compatibility - now handled directly in main app"""
        # Toggle is now handled by the main application
        pass
    
    def stop_response_generation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞"""
        if self.response_active:
            self.stop_generation = True
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.stop_button.pack_forget()
            self.send_button.pack(side="right")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self._update_response("\n\n*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º*", "error") 
    
    def _test_debug_output(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        self.log_debug("_test_debug_output started")
        
        if not hasattr(self, 'logger') or not self.logger:
            print("–í–ù–ò–ú–ê–ù–ò–ï: –õ–æ–≥–≥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            self.log_debug("WARNING: Logger not configured!")
            return
            
        try:
            # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
            self.log_debug("=== –¢–ï–°–¢ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –í–´–í–û–î–ê ===")
            self.log_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ INFO —Å–æ–æ–±—â–µ–Ω–∏—è")
            self.log_debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è")
            self.log_error("–ü—Ä–æ–≤–µ—Ä–∫–∞ ERROR —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            self.log_debug("Standard logging test completed")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            test_thread = threading.Thread(target=self._debug_test_thread)
            test_thread.daemon = True
            self.log_debug(f"Starting test thread {test_thread.name}")
            test_thread.start()
            test_thread.join(timeout=1.0)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É
            self.log_debug("Test thread completed")
            
            self.log_debug("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
            self.log_debug("_test_debug_output completed")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")
            self.log_debug(f"Error in _test_debug_output: {str(e)}")
            traceback.print_exc()
    
    def _debug_test_thread(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ª–æ–≥–≥–µ—Ä–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        thread_id = threading.get_ident()
