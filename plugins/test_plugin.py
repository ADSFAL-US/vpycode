"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞–≥–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã vpycode.
"""
import random
import tkinter as tk
import customtkinter as ctk
from plugins.base import Plugin

class TestPlugin(Plugin):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è vpycode."""
    
    def __init__(self, app):
        super().__init__(app)
        self.name = "TestPlugin"
        self.version = "1.0.0"
        self.description = "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞–≥–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
        self.author = "vpycode Team"
        
        # –ö–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ –ø–ª–∞–≥–∏–Ω–æ–º
        self.sidebar_button = None
        self.menu_items_added = False
        self.demo_window = None
    
    def activate(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞."""
        print(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ {self.name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        self.sidebar_button = self.add_sidebar_button("üß™", self.show_demo_window)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
        self.add_menu_command("–ü—Ä–∞–≤–∫–∞", "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É", self.reverse_current_line)
        self.add_menu_command("–í–∏–¥", "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω", self.change_background_color)
        self.add_menu_command("–ó–∞–ø—É—Å–∫", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", self.send_console_message)
        
        self.menu_items_added = True
        print(f"–ü–ª–∞–≥–∏–Ω {self.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    
    def deactivate(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞."""
        print(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ {self.name}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if self.demo_window and self.demo_window.winfo_exists():
            self.demo_window.destroy()
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        print(f"–ü–ª–∞–≥–∏–Ω {self.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    
    def show_demo_window(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–ª–∞–≥–∏–Ω–∞."""
        if self.demo_window and self.demo_window.winfo_exists():
            self.demo_window.focus_set()
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.demo_window = self.add_gui_window(
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞", 
            self._setup_demo_content, 
            width=600, 
            height=400
        )
    
    def _setup_demo_content(self, window):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –æ–∫–Ω–∞
        window.grid_columnconfigure(0, weight=1)
        window.grid_rowconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(window, fg_color="transparent", height=40)
        header.grid(row=0, column=0, sticky="ew", padx=10, pady=(10, 0))
        
        header_label = ctk.CTkLabel(
            header, 
            text="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–ª–∞–≥–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", 
            font=("Arial", 14, "bold"),
            text_color=self.app.theme.FOREGROUND
        )
        header_label.pack(side="left", padx=10)
        
        # Notebook —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ctk.CTkTabview(window)
        notebook.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ UI
        ui_tab = notebook.add("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        # –í–∫–ª–∞–¥–∫–∞ –†–µ–¥–∞–∫—Ç–æ—Ä
        editor_tab = notebook.add("–†–µ–¥–∞–∫—Ç–æ—Ä")
        
        # –í–∫–ª–∞–¥–∫–∞ –ö–æ–Ω—Å–æ–ª—å
        console_tab = notebook.add("–ö–æ–Ω—Å–æ–ª—å/–¢–µ—Ä–º–∏–Ω–∞–ª")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É UI
        ui_frame = ctk.CTkFrame(ui_tab, fg_color="transparent")
        ui_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        theme_label = ctk.CTkLabel(
            ui_frame,
            text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            font=("Arial", 12, "bold"),
            text_color=self.app.theme.FOREGROUND
        )
        theme_label.pack(pady=(10, 5))
        
        theme_buttons_frame = ctk.CTkFrame(ui_frame, fg_color="transparent")
        theme_buttons_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        bg_btn = ctk.CTkButton(
            theme_buttons_frame,
            text="–°–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω",
            command=self.change_background_color,
            fg_color=self.app.theme.BUTTON_BG,
            hover_color=self.app.theme.BUTTON_HOVER
        )
        bg_btn.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–µ–º–µ
        reset_btn = ctk.CTkButton(
            theme_buttons_frame,
            text="–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–º—É",
            command=self.reset_theme,
            fg_color=self.app.theme.BUTTON_BG,
            hover_color=self.app.theme.BUTTON_HOVER
        )
        reset_btn.pack(side="left", padx=5)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –†–µ–¥–∞–∫—Ç–æ—Ä
        editor_frame = ctk.CTkFrame(editor_tab, fg_color="transparent")
        editor_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        editor_label = ctk.CTkLabel(
            editor_frame,
            text="–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞",
            font=("Arial", 12, "bold"),
            text_color=self.app.theme.FOREGROUND
        )
        editor_label.pack(pady=(10, 5))
        
        editor_buttons_frame = ctk.CTkFrame(editor_frame, fg_color="transparent")
        editor_buttons_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        reverse_btn = ctk.CTkButton(
            editor_buttons_frame,
            text="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É",
            command=self.reverse_current_line,
            fg_color=self.app.theme.BUTTON_BG,
            hover_color=self.app.theme.BUTTON_HOVER
        )
        reverse_btn.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        add_text_btn = ctk.CTkButton(
            editor_buttons_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
            command=self.add_demo_text,
            fg_color=self.app.theme.BUTTON_BG,
            hover_color=self.app.theme.BUTTON_HOVER
        )
        add_text_btn.pack(side="left", padx=5)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ö–æ–Ω—Å–æ–ª—å/–¢–µ—Ä–º–∏–Ω–∞–ª
        console_frame = ctk.CTkFrame(console_tab, fg_color="transparent")
        console_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        console_label = ctk.CTkLabel(
            console_frame,
            text="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Å–æ–ª—å—é",
            font=("Arial", 12, "bold"),
            text_color=self.app.theme.FOREGROUND
        )
        console_label.pack(pady=(10, 5))
        
        console_buttons_frame = ctk.CTkFrame(console_frame, fg_color="transparent")
        console_buttons_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        message_btn = ctk.CTkButton(
            console_buttons_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            command=self.send_console_message,
            fg_color=self.app.theme.BUTTON_BG,
            hover_color=self.app.theme.BUTTON_HOVER
        )
        message_btn.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
        clear_btn = ctk.CTkButton(
            console_buttons_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å",
            command=self.app.clear_console,
            fg_color=self.app.theme.BUTTON_BG,
            hover_color=self.app.theme.BUTTON_HOVER
        )
        clear_btn.pack(side="left", padx=5)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        notebook.set("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    def reverse_current_line(self):
        """–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            current_pos = self.app.code_editor.index(tk.INSERT)
            line_num = int(float(current_pos))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            line_start = f"{line_num}.0"
            line_end = f"{line_num}.end"
            line_content = self.app.code_editor.get(line_start, line_end)
            
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            reversed_text = line_content[::-1]
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫–µ
            self.app.code_editor.delete(line_start, line_end)
            self.app.code_editor.insert(line_start, reversed_text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.app.status_text.configure(text="–°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
    
    def change_background_color(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π."""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex
            r = random.randint(10, 60)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
            g = random.randint(10, 60)
            b = random.randint(10, 60)
            
            bg_color = f"#{r:02x}{g:02x}{b:02x}"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π
            new_theme = {
                "BACKGROUND": bg_color,
                "DARKER_BG": self._darken_color(bg_color, 20),  # –ó–∞—Ç–µ–º–Ω—è–µ–º –Ω–∞ 20%
                "LIGHTER_BG": self._lighten_color(bg_color, 20), # –û—Å–≤–µ—Ç–ª—è–µ–º –Ω–∞ 20%
                "PANEL_BG": bg_color
            }
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
            self.change_theme(new_theme)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.app.status_text.configure(text=f"–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {bg_color}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ–Ω–∞: {e}")
    
    def _darken_color(self, hex_color, percent):
        """–ó–∞—Ç–µ–º–Ω—è–µ—Ç —Ü–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç."""
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª # –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        hex_color = hex_color.lstrip('#')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB
        r = int(hex_color[0:2], 16)
        g = int(hex_color[2:4], 16)
        b = int(hex_color[4:6], 16)
        
        # –£–º–µ–Ω—å—à–∞–µ–º —è—Ä–∫–æ—Å—Ç—å
        factor = (100 - percent) / 100
        r = int(r * factor)
        g = int(g * factor)
        b = int(b * factor)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π hex-—Ü–≤–µ—Ç
        return f"#{r:02x}{g:02x}{b:02x}"
    
    def _lighten_color(self, hex_color, percent):
        """–û—Å–≤–µ—Ç–ª—è–µ—Ç —Ü–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç."""
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª # –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        hex_color = hex_color.lstrip('#')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB
        r = int(hex_color[0:2], 16)
        g = int(hex_color[2:4], 16)
        b = int(hex_color[4:6], 16)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å
        factor = (100 + percent) / 100
        r = min(255, int(r * factor))
        g = min(255, int(g * factor))
        b = min(255, int(b * factor))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π hex-—Ü–≤–µ—Ç
        return f"#{r:02x}{g:02x}{b:02x}"
    
    def send_console_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Å–æ–ª—å –≤–∏–¥–∏–º–∞
        if not self.app.console_frame.winfo_viewable():
            self.app.toggle_console()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.write_to_console("=== –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–ª–∞–≥–∏–Ω–∞ ===\n", "info")
        self.app.write_to_console("–≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n")
        self.app.write_to_console("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n", "info")
        self.app.write_to_console("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ\n", "success")
        self.app.write_to_console("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\n", "error")
    
    def reset_theme(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–µ–º—É Kanagawa."""
        from main import KanagawaTheme
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ç–µ–º—ã
        original_theme = {attr: getattr(KanagawaTheme, attr) for attr in dir(KanagawaTheme) 
                         if not attr.startswith('_') and isinstance(getattr(KanagawaTheme, attr), str)}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–µ–º—É
        self.change_theme(original_theme)
        self.app.status_text.configure(text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞")
    
    def add_demo_text(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä."""
        demo_text = """# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–ª–∞–≥–∏–Ω–∞
def –¥–µ–º–æ_—Ñ—É–Ω–∫—Ü–∏—è():
    \"\"\"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.\"\"\"
    print("–ü—Ä–∏–≤–µ—Ç –æ—Ç –ø–ª–∞–≥–∏–Ω–∞!")
    return True

# –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞
class –î–µ–º–æ–ö–ª–∞—Å—Å:
    def __init__(self):
        self.—Å–æ–æ–±—â–µ–Ω–∏–µ = "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã vpycode!"
        
    def –ø–æ–∫–∞–∑–∞—Ç—å(self):
        print(self.—Å–æ–æ–±—â–µ–Ω–∏–µ)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
–¥–µ–º–æ = –î–µ–º–æ–ö–ª–∞—Å—Å()
–¥–µ–º–æ.–ø–æ–∫–∞–∑–∞—Ç—å()
"""
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        self.app.code_editor.insert(tk.INSERT, demo_text)
        self.app.highlight_syntax()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self.app.status_text.configure(text="–î–æ–±–∞–≤–ª–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥")
    
    def run_any_code(self, file_path, file_extension):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤-–æ—Ç–ª–∞–¥—á–∏–∫–æ–≤.
        """
        import subprocess
        
        try:
            self.app.write_to_console(f"TestPlugin: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ {file_path}\n", "info")
            self.app.write_to_console(f"–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞-–æ—Ç–ª–∞–¥—á–∏–∫–∞.\n", "info")
            self.app.write_to_console(f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}\n", "info")
            
            # –ü—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–ª–∞–≥–∏–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            self.app.write_to_console("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–º –ø–ª–∞–≥–∏–Ω–æ–º.\n", "success")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç.–∫. —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Ç
            return None
        except Exception as e:
            self.app.write_to_console(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞: {str(e)}\n", "error")
            return None 